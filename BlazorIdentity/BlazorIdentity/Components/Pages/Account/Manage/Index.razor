@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity;
@using BlazorIdentity.Data;
@using BlazorIdentity.Identity

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject UserAccessor UserAccessor;
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />

<div class="row">
    <div class="col-md-6">
        <EditForm id="profile-form" Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="form-floating mb-3">
                <input id="username" type="text" value="@_username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>
            <div class="form-floating mb-3">
                <InputText id="firstname" @bind-Value="Input.FirstName" class="form-control" placeholder="Please enter your first name." />
                <label for="firstname" class="form-label">First name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText id="lastname" @bind-Value="Input.LastName" class="form-control" placeholder="Please enter your last name." />
                <label for="lastname" class="form-label">Last name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText id="phone-number" @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>
            <button id="update-profile-button" type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
        </EditForm>
    </div>
    <div class="col-md-6">
        <div class="form-floating">
            <label asp-for="Input.ProfilePicture" style="width: 100%;"></label>
            @if (Input.ProfilePicture != null && Input.ProfilePicture.Length > 0)
            {
                <img id="profilePicture" style="width:350px;height:350px; object-fit:cover" src="data:image/*;base64,@(Convert.ToBase64String(Input.ProfilePicture))">
            }
            else
            {
                <InputFile OnChange="LoadFiles" />
            }
            <span asp-validation-for="Input.ProfilePicture" class="text-danger"></span>
        </div>
    </div>
</div>

@code {
    private ApplicationUser _user = default!;
    private string? _firstname;
    private string? _lastname;
    private string? _username;
    private string? _phoneNumber;
    private byte[]? _profilePicture;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();

        _user = await UserAccessor.GetRequiredUserAsync();
        _username = await UserManager.GetUserNameAsync(_user);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);
        _firstname = _user.FirstName;
        _lastname = _user.LastName;
        _profilePicture = _user.ProfilePicture;

        Input.FirstName ??= _firstname;
        Input.LastName ??= _lastname;
        Input.PhoneNumber ??= _phoneNumber;
        Input.ProfilePicture ??= _profilePicture;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        MemoryStream ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var bytes = ms.ToArray();

        _user.ProfilePicture = bytes;
        await UserManager.UpdateAsync(_user);

        Input.ProfilePicture = bytes;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != _phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Unexpected error when trying to set phone number.");
                return;
            }
        }

        if (Input.FirstName != _firstname)
        {
            _user.FirstName = Input.FirstName;
            await UserManager.UpdateAsync(_user);
        }
        if (Input.LastName != _lastname)
        {
            _user.LastName = Input.LastName;
            await UserManager.UpdateAsync(_user);
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated");
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First Name")]
        public string? FirstName { get; set; }
        [Display(Name = "Last Name")]
        public string? LastName { get; set; }
        [Display(Name = "Username")]
        public string? Username { get; set; }
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
        [Display(Name = "Profile Picture")]
        public byte[]? ProfilePicture { get; set; }
    }
}
